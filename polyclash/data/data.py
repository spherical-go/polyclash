import numpy as np
from scipy.spatial import cKDTree

pentagons = np.arange(60, dtype=np.int16).reshape(12, 5)

triangles = np.array(
    [
        [4, 6, 36],
        [6, 35, 36],
        [4, 5, 6],
        [6, 7, 35],
        [3, 4, 36],
        [3, 36, 37],
        [0, 4, 5],
        [7, 34, 35],
        [34, 35, 39],
        [0, 5, 14],
        [5, 9, 14],
        [7, 8, 33],
        [7, 33, 34],
        [1, 13, 17],
        [1, 17, 18],
        [0, 1, 13],
        [1, 2, 18],
        [12, 13, 17],
        [12, 16, 17],
        [0, 13, 14],
        [2, 18, 21],
        [18, 19, 21],
        [2, 3, 22],
        [2, 21, 22],
        [9, 10, 14],
        [9, 10, 48],
        [8, 9, 48],
        [10, 48, 49],
        [10, 11, 49],
        [8, 47, 48],
        [11, 49, 50],
        [45, 49, 50],
        [11, 50, 51],
        [11, 12, 51],
        [45, 50, 54],
        [12, 16, 51],
        [16, 51, 52],
        [8, 33, 47],
        [32, 33, 47],
        [32, 46, 47],
        [32, 46, 58],
        [31, 32, 58],
        [46, 58, 59],
        [45, 46, 59],
        [30, 34, 39],
        [31, 57, 58],
        [45, 54, 59],
        [54, 55, 59],
        [3, 22, 37],
        [22, 23, 37],
        [23, 37, 38],
        [23, 38, 41],
        [23, 24, 41],
        [38, 39, 40],
        [38, 40, 41],
        [30, 39, 40],
        [30, 40, 44],
        [30, 31, 44],
        [19, 20, 21],
        [24, 41, 42],
        [31, 44, 57],
        [43, 44, 57],
        [15, 16, 52],
        [15, 28, 52],
        [28, 52, 53],
        [15, 19, 29],
        [15, 28, 29],
        [19, 20, 29],
        [20, 25, 29],
        [20, 24, 25],
        [27, 28, 53],
        [24, 25, 42],
        [25, 26, 42],
        [53, 54, 55],
        [27, 53, 55],
        [27, 55, 56],
        [26, 27, 56],
        [43, 56, 57],
        [26, 43, 56],
        [26, 42, 43],
    ],
    dtype=np.uint16,
)

polysmalls = np.array(
    [
        [210, 61, 6, 60],
        [210, 60, 36, 65],
        [210, 65, 4, 61],
        [211, 62, 35, 68],
        [211, 68, 36, 60],
        [211, 60, 6, 62],
        [212, 69, 5, 63],
        [212, 63, 6, 61],
        [212, 61, 4, 69],
        [213, 64, 7, 72],
        [213, 72, 35, 62],
        [213, 62, 6, 64],
        [214, 71, 4, 65],
        [214, 65, 36, 67],
        [214, 67, 3, 71],
        [215, 67, 36, 66],
        [215, 66, 37, 146],
        [215, 146, 3, 67],
        [216, 70, 4, 69],
        [216, 69, 5, 76],
        [216, 76, 0, 70],
        [217, 78, 34, 73],
        [217, 73, 35, 72],
        [217, 72, 7, 78],
        [218, 73, 35, 74],
        [218, 74, 39, 137],
        [218, 137, 34, 73],
        [219, 76, 5, 75],
        [219, 75, 14, 96],
        [219, 96, 0, 76],
        [220, 77, 9, 101],
        [220, 101, 14, 75],
        [220, 75, 5, 77],
        [221, 80, 8, 125],
        [221, 125, 33, 79],
        [221, 79, 7, 80],
        [222, 79, 33, 129],
        [222, 129, 34, 78],
        [222, 78, 7, 79],
        [223, 82, 13, 86],
        [223, 86, 17, 81],
        [223, 81, 1, 82],
        [224, 81, 17, 89],
        [224, 89, 18, 83],
        [224, 83, 1, 81],
        [225, 84, 1, 82],
        [225, 82, 13, 90],
        [225, 90, 0, 84],
        [226, 85, 2, 93],
        [226, 93, 18, 83],
        [226, 83, 1, 85],
        [227, 92, 13, 86],
        [227, 86, 17, 88],
        [227, 88, 12, 92],
        [228, 123, 16, 87],
        [228, 87, 17, 88],
        [228, 88, 12, 123],
        [229, 90, 13, 91],
        [229, 91, 14, 96],
        [229, 96, 0, 90],
        [230, 93, 18, 94],
        [230, 94, 21, 97],
        [230, 97, 2, 93],
        [231, 95, 19, 164],
        [231, 164, 21, 94],
        [231, 94, 18, 95],
        [232, 99, 3, 147],
        [232, 147, 22, 98],
        [232, 98, 2, 99],
        [233, 97, 21, 151],
        [233, 151, 22, 98],
        [233, 98, 2, 97],
        [234, 102, 10, 100],
        [234, 100, 14, 101],
        [234, 101, 9, 102],
        [235, 102, 10, 105],
        [235, 105, 48, 103],
        [235, 103, 9, 102],
        [236, 104, 9, 103],
        [236, 103, 48, 109],
        [236, 109, 8, 104],
        [237, 105, 48, 110],
        [237, 110, 49, 106],
        [237, 106, 10, 105],
        [238, 107, 11, 111],
        [238, 111, 49, 106],
        [238, 106, 10, 107],
        [239, 124, 47, 108],
        [239, 108, 48, 109],
        [239, 109, 8, 124],
        [240, 111, 49, 112],
        [240, 112, 50, 114],
        [240, 114, 11, 111],
        [241, 113, 49, 112],
        [241, 112, 50, 118],
        [241, 118, 45, 113],
        [242, 114, 50, 119],
        [242, 119, 51, 115],
        [242, 115, 11, 114],
        [243, 116, 12, 121],
        [243, 121, 51, 115],
        [243, 115, 11, 116],
        [244, 118, 50, 117],
        [244, 117, 54, 145],
        [244, 145, 45, 118],
        [245, 123, 16, 120],
        [245, 120, 51, 121],
        [245, 121, 12, 123],
        [246, 120, 51, 122],
        [246, 122, 52, 174],
        [246, 174, 16, 120],
        [247, 125, 33, 126],
        [247, 126, 47, 124],
        [247, 124, 8, 125],
        [248, 130, 33, 126],
        [248, 126, 47, 127],
        [248, 127, 32, 130],
        [249, 131, 46, 128],
        [249, 128, 47, 127],
        [249, 127, 32, 131],
        [250, 131, 46, 134],
        [250, 134, 58, 132],
        [250, 132, 32, 131],
        [251, 133, 32, 132],
        [251, 132, 58, 140],
        [251, 140, 31, 133],
        [252, 134, 58, 141],
        [252, 141, 59, 135],
        [252, 135, 46, 134],
        [253, 136, 46, 135],
        [253, 135, 59, 143],
        [253, 143, 45, 136],
        [254, 138, 34, 137],
        [254, 137, 39, 159],
        [254, 159, 30, 138],
        [255, 173, 57, 139],
        [255, 139, 58, 140],
        [255, 140, 31, 173],
        [256, 145, 54, 142],
        [256, 142, 59, 143],
        [256, 143, 45, 145],
        [257, 195, 55, 144],
        [257, 144, 59, 142],
        [257, 142, 54, 195],
        [258, 147, 22, 148],
        [258, 148, 37, 146],
        [258, 146, 3, 147],
        [259, 152, 23, 149],
        [259, 149, 37, 148],
        [259, 148, 22, 152],
        [260, 149, 37, 150],
        [260, 150, 38, 153],
        [260, 153, 23, 149],
        [261, 153, 38, 156],
        [261, 156, 41, 154],
        [261, 154, 23, 153],
        [262, 155, 24, 167],
        [262, 167, 41, 154],
        [262, 154, 23, 155],
        [263, 158, 39, 160],
        [263, 160, 40, 157],
        [263, 157, 38, 158],
        [264, 157, 40, 168],
        [264, 168, 41, 156],
        [264, 156, 38, 157],
        [265, 159, 39, 160],
        [265, 160, 40, 161],
        [265, 161, 30, 159],
        [266, 161, 40, 169],
        [266, 169, 44, 162],
        [266, 162, 30, 161],
        [267, 163, 31, 171],
        [267, 171, 44, 162],
        [267, 162, 30, 163],
        [268, 182, 20, 165],
        [268, 165, 21, 164],
        [268, 164, 19, 182],
        [269, 167, 41, 166],
        [269, 166, 42, 194],
        [269, 194, 24, 167],
        [270, 171, 44, 170],
        [270, 170, 57, 173],
        [270, 173, 31, 171],
        [271, 172, 44, 170],
        [271, 170, 57, 203],
        [271, 203, 43, 172],
        [272, 175, 16, 174],
        [272, 174, 52, 176],
        [272, 176, 15, 175],
        [273, 179, 28, 178],
        [273, 178, 52, 176],
        [273, 176, 15, 179],
        [274, 178, 52, 177],
        [274, 177, 53, 187],
        [274, 187, 28, 178],
        [275, 181, 19, 183],
        [275, 183, 29, 180],
        [275, 180, 15, 181],
        [276, 179, 28, 189],
        [276, 189, 29, 180],
        [276, 180, 15, 179],
        [277, 182, 20, 184],
        [277, 184, 29, 183],
        [277, 183, 19, 182],
        [278, 185, 25, 190],
        [278, 190, 29, 184],
        [278, 184, 20, 185],
        [279, 186, 24, 192],
        [279, 192, 25, 185],
        [279, 185, 20, 186],
        [280, 188, 28, 187],
        [280, 187, 53, 200],
        [280, 200, 27, 188],
        [281, 192, 25, 191],
        [281, 191, 42, 194],
        [281, 194, 24, 192],
        [282, 193, 26, 209],
        [282, 209, 42, 191],
        [282, 191, 25, 193],
        [283, 196, 54, 195],
        [283, 195, 55, 197],
        [283, 197, 53, 196],
        [284, 200, 53, 197],
        [284, 197, 55, 199],
        [284, 199, 27, 200],
        [285, 199, 55, 198],
        [285, 198, 56, 201],
        [285, 201, 27, 199],
        [286, 202, 27, 201],
        [286, 201, 56, 208],
        [286, 208, 26, 202],
        [287, 205, 56, 204],
        [287, 204, 57, 203],
        [287, 203, 43, 205],
        [288, 207, 43, 205],
        [288, 205, 56, 208],
        [288, 208, 26, 207],
        [289, 209, 42, 206],
        [289, 206, 43, 207],
        [289, 207, 26, 209],
    ],
    dtype=np.uint16,
)

polylarges = np.array(
    [
        [290, 84, 1, 85],
        [290, 85, 2, 99],
        [290, 99, 3, 71],
        [290, 71, 4, 70],
        [290, 70, 0, 84],
        [291, 63, 6, 64],
        [291, 64, 7, 80],
        [291, 80, 8, 104],
        [291, 104, 9, 77],
        [291, 77, 5, 63],
        [292, 107, 11, 116],
        [292, 116, 12, 92],
        [292, 92, 13, 91],
        [292, 91, 14, 100],
        [292, 100, 10, 107],
        [293, 175, 16, 87],
        [293, 87, 17, 89],
        [293, 89, 18, 95],
        [293, 95, 19, 181],
        [293, 181, 15, 175],
        [294, 165, 21, 151],
        [294, 151, 22, 152],
        [294, 152, 23, 155],
        [294, 155, 24, 186],
        [294, 186, 20, 165],
        [295, 193, 26, 202],
        [295, 202, 27, 188],
        [295, 188, 28, 189],
        [295, 189, 29, 190],
        [295, 190, 25, 193],
        [296, 163, 31, 133],
        [296, 133, 32, 130],
        [296, 130, 33, 129],
        [296, 129, 34, 138],
        [296, 138, 30, 163],
        [297, 68, 36, 66],
        [297, 66, 37, 150],
        [297, 150, 38, 158],
        [297, 158, 39, 74],
        [297, 74, 35, 68],
        [298, 168, 41, 166],
        [298, 166, 42, 206],
        [298, 206, 43, 172],
        [298, 172, 44, 169],
        [298, 169, 40, 168],
        [299, 136, 46, 128],
        [299, 128, 47, 108],
        [299, 108, 48, 110],
        [299, 110, 49, 113],
        [299, 113, 45, 136],
        [300, 119, 51, 122],
        [300, 122, 52, 177],
        [300, 177, 53, 196],
        [300, 196, 54, 117],
        [300, 117, 50, 119],
        [301, 198, 56, 204],
        [301, 204, 57, 139],
        [301, 139, 58, 141],
        [301, 141, 59, 144],
        [301, 144, 55, 198],
    ]
)

triangle2faces = np.arange(240, dtype=np.int16).reshape(80, 3)
pentagon2faces = np.arange(240, 300, 1, dtype=np.int16).reshape(12, 5)

neighbors = {
    6: {64, 60, 61, 62, 63},
    36: {65, 66, 67, 68, 60},
    60: {210, 211, 36, 6},
    4: {65, 69, 70, 71, 61},
    61: {210, 212, 4, 6},
    35: {68, 72, 73, 74, 62},
    62: {35, 213, 6, 211},
    5: {69, 75, 76, 77, 63},
    63: {291, 212, 5, 6},
    7: {64, 72, 78, 79, 80},
    64: {291, 213, 6, 7},
    65: {210, 4, 214, 36},
    37: {66, 146, 148, 149, 150},
    66: {297, 36, 37, 215},
    3: {67, 99, 71, 146, 147},
    67: {3, 36, 214, 215},
    68: {297, 35, 36, 211},
    69: {216, 5, 212, 4},
    0: {96, 70, 76, 84, 90},
    70: {0, 290, 4, 216},
    71: {290, 3, 4, 214},
    72: {217, 35, 213, 7},
    34: {129, 73, 137, 138, 78},
    73: {217, 34, 35, 218},
    39: {160, 137, 74, 158, 159},
    74: {297, 218, 35, 39},
    14: {96, 100, 101, 75, 91},
    75: {219, 220, 5, 14},
    76: {0, 219, 5, 216},
    9: {101, 102, 103, 104, 77},
    77: {9, 291, 220, 5},
    78: {217, 34, 222, 7},
    33: {129, 130, 79, 125, 126},
    79: {33, 221, 222, 7},
    8: {104, 109, 80, 124, 125},
    80: {8, 291, 221, 7},
    1: {81, 82, 83, 84, 85},
    17: {81, 86, 87, 88, 89},
    81: {224, 1, 17, 223},
    13: {82, 86, 90, 91, 92},
    82: {1, 13, 225, 223},
    18: {83, 89, 93, 94, 95},
    83: {224, 1, 18, 226},
    84: {0, 1, 290, 225},
    2: {97, 98, 99, 85, 93},
    85: {1, 2, 226, 290},
    86: {17, 227, 13, 223},
    16: {174, 175, 87, 120, 123},
    87: {16, 17, 228, 293},
    12: {116, 88, 121, 123, 92},
    88: {17, 227, 12, 228},
    89: {224, 17, 18, 293},
    90: {0, 225, 13, 229},
    91: {13, 292, 229, 14},
    92: {227, 12, 13, 292},
    93: {18, 226, 2, 230},
    21: {97, 164, 165, 151, 94},
    94: {18, 21, 230, 231},
    19: {164, 181, 182, 183, 95},
    95: {18, 19, 293, 231},
    96: {0, 219, 229, 14},
    97: {233, 2, 21, 230},
    22: {98, 147, 148, 151, 152},
    98: {232, 233, 2, 22},
    99: {232, 2, 3, 290},
    10: {100, 102, 105, 106, 107},
    100: {10, 234, 292, 14},
    101: {9, 234, 220, 14},
    102: {9, 10, 234, 235},
    48: {103, 105, 108, 109, 110},
    103: {48, 9, 235, 236},
    104: {8, 9, 291, 236},
    105: {48, 10, 235, 237},
    49: {106, 110, 111, 112, 113},
    106: {49, 10, 237, 238},
    11: {107, 111, 114, 115, 116},
    107: {10, 11, 292, 238},
    47: {128, 108, 124, 126, 127},
    108: {48, 299, 47, 239},
    109: {8, 48, 236, 239},
    110: {48, 49, 299, 237},
    111: {240, 49, 11, 238},
    50: {112, 114, 117, 118, 119},
    112: {240, 49, 50, 241},
    45: {136, 143, 113, 145, 118},
    113: {45, 49, 299, 241},
    114: {240, 242, 11, 50},
    51: {115, 119, 120, 121, 122},
    115: {11, 242, 51, 243},
    116: {11, 12, 292, 243},
    54: {195, 196, 142, 145, 117},
    117: {50, 244, 54, 300},
    118: {241, 50, 244, 45},
    119: {242, 51, 50, 300},
    120: {16, 51, 245, 246},
    121: {51, 12, 245, 243},
    52: {174, 176, 177, 178, 122},
    122: {51, 52, 246, 300},
    123: {16, 228, 12, 245},
    124: {8, 239, 47, 247},
    125: {8, 33, 221, 247},
    126: {248, 33, 47, 247},
    32: {130, 131, 132, 133, 127},
    127: {32, 248, 249, 47},
    46: {128, 131, 134, 135, 136},
    128: {249, 299, 46, 47},
    129: {296, 33, 34, 222},
    130: {32, 33, 296, 248},
    131: {32, 249, 250, 46},
    58: {132, 134, 139, 140, 141},
    132: {32, 58, 250, 251},
    31: {163, 133, 171, 140, 173},
    133: {32, 296, 251, 31},
    134: {58, 250, 252, 46},
    59: {135, 141, 142, 143, 144},
    135: {59, 252, 253, 46},
    136: {45, 299, 253, 46},
    137: {218, 34, 254, 39},
    30: {161, 162, 163, 138, 159},
    138: {296, 34, 30, 254},
    57: {170, 139, 204, 173, 203},
    139: {57, 58, 301, 255},
    140: {58, 251, 31, 255},
    141: {58, 59, 252, 301},
    142: {256, 257, 59, 54},
    143: {256, 45, 59, 253},
    55: {195, 197, 198, 199, 144},
    144: {257, 59, 301, 55},
    145: {256, 244, 45, 54},
    146: {258, 3, 37, 215},
    147: {232, 258, 3, 22},
    148: {258, 259, 37, 22},
    23: {149, 152, 153, 154, 155},
    149: {259, 260, 37, 23},
    38: {150, 153, 156, 157, 158},
    150: {297, 260, 37, 38},
    151: {233, 21, 294, 22},
    152: {259, 23, 294, 22},
    153: {260, 261, 38, 23},
    41: {166, 167, 168, 154, 156},
    154: {41, 261, 262, 23},
    24: {192, 194, 167, 186, 155},
    155: {24, 23, 294, 262},
    156: {264, 41, 261, 38},
    40: {160, 161, 168, 169, 157},
    157: {40, 264, 38, 263},
    158: {297, 39, 38, 263},
    159: {265, 39, 254, 30},
    160: {40, 265, 39, 263},
    161: {40, 265, 266, 30},
    44: {162, 169, 170, 171, 172},
    162: {266, 267, 44, 30},
    163: {296, 267, 30, 31},
    164: {19, 268, 21, 231},
    20: {165, 182, 184, 185, 186},
    165: {21, 268, 20, 294},
    42: {194, 166, 206, 209, 191},
    166: {41, 42, 298, 269},
    167: {24, 41, 269, 262},
    168: {40, 41, 298, 264},
    169: {40, 266, 44, 298},
    170: {57, 44, 270, 271},
    171: {267, 44, 270, 31},
    43: {203, 172, 205, 206, 207},
    172: {298, 43, 44, 271},
    173: {57, 31, 270, 255},
    174: {16, 272, 52, 246},
    15: {175, 176, 179, 180, 181},
    175: {16, 272, 293, 15},
    176: {272, 273, 52, 15},
    53: {196, 197, 200, 177, 187},
    177: {274, 52, 53, 300},
    28: {178, 179, 187, 188, 189},
    178: {273, 274, 28, 52},
    179: {273, 28, 276, 15},
    29: {180, 183, 184, 189, 190},
    180: {275, 276, 29, 15},
    181: {19, 275, 293, 15},
    182: {268, 19, 20, 277},
    183: {19, 29, 275, 277},
    184: {29, 20, 277, 278},
    25: {192, 193, 185, 190, 191},
    185: {25, 20, 278, 279},
    186: {24, 20, 294, 279},
    187: {280, 274, 28, 53},
    27: {199, 200, 201, 202, 188},
    188: {280, 27, 28, 295},
    189: {29, 276, 28, 295},
    190: {25, 29, 278, 295},
    191: {25, 42, 282, 281},
    192: {24, 25, 281, 279},
    26: {193, 202, 207, 208, 209},
    193: {25, 26, 282, 295},
    194: {24, 281, 42, 269},
    195: {257, 283, 54, 55},
    196: {283, 300, 53, 54},
    197: {283, 284, 53, 55},
    56: {198, 201, 204, 205, 208},
    198: {56, 285, 301, 55},
    199: {27, 284, 285, 55},
    200: {280, 27, 284, 53},
    201: {56, 27, 285, 286},
    202: {26, 27, 286, 295},
    203: {57, 43, 271, 287},
    204: {56, 57, 301, 287},
    205: {56, 288, 43, 287},
    206: {289, 42, 43, 298},
    207: {288, 289, 26, 43},
    208: {56, 26, 288, 286},
    209: {289, 26, 282, 42},
    210: {65, 60, 61},
    211: {68, 62, 60},
    212: {69, 61, 63},
    213: {64, 72, 62},
    214: {65, 67, 71},
    215: {66, 67, 146},
    216: {76, 69, 70},
    217: {72, 73, 78},
    218: {73, 74, 137},
    219: {96, 75, 76},
    220: {75, 77, 101},
    221: {80, 125, 79},
    222: {129, 78, 79},
    223: {81, 82, 86},
    224: {81, 89, 83},
    225: {82, 84, 90},
    226: {83, 85, 93},
    227: {88, 92, 86},
    228: {88, 123, 87},
    229: {96, 90, 91},
    230: {97, 93, 94},
    231: {164, 94, 95},
    232: {98, 99, 147},
    233: {97, 98, 151},
    234: {100, 101, 102},
    235: {105, 102, 103},
    236: {104, 109, 103},
    237: {105, 106, 110},
    238: {106, 107, 111},
    239: {124, 108, 109},
    240: {112, 114, 111},
    241: {112, 113, 118},
    242: {114, 115, 119},
    243: {121, 115, 116},
    244: {145, 117, 118},
    245: {120, 121, 123},
    246: {120, 122, 174},
    247: {124, 125, 126},
    248: {130, 126, 127},
    249: {128, 131, 127},
    250: {131, 132, 134},
    251: {132, 140, 133},
    252: {141, 134, 135},
    253: {136, 135, 143},
    254: {137, 138, 159},
    255: {139, 140, 173},
    256: {145, 142, 143},
    257: {144, 195, 142},
    258: {146, 147, 148},
    259: {152, 148, 149},
    260: {153, 149, 150},
    261: {153, 154, 156},
    262: {154, 155, 167},
    263: {160, 157, 158},
    264: {168, 156, 157},
    265: {160, 161, 159},
    266: {161, 162, 169},
    267: {162, 163, 171},
    268: {164, 165, 182},
    269: {194, 166, 167},
    270: {170, 171, 173},
    271: {170, 203, 172},
    272: {176, 174, 175},
    273: {176, 178, 179},
    274: {177, 178, 187},
    275: {180, 181, 183},
    276: {179, 180, 189},
    277: {184, 182, 183},
    278: {184, 185, 190},
    279: {192, 185, 186},
    280: {200, 187, 188},
    281: {192, 194, 191},
    282: {193, 209, 191},
    283: {195, 196, 197},
    284: {200, 197, 199},
    285: {201, 198, 199},
    286: {208, 201, 202},
    287: {203, 204, 205},
    288: {208, 205, 207},
    289: {209, 206, 207},
    290: {99, 70, 71, 84, 85},
    291: {64, 104, 77, 80, 63},
    292: {100, 107, 116, 91, 92},
    293: {175, 181, 87, 89, 95},
    294: {165, 151, 152, 186, 155},
    295: {193, 202, 188, 189, 190},
    296: {129, 130, 163, 133, 138},
    297: {66, 68, 74, 150, 158},
    298: {166, 168, 169, 172, 206},
    299: {128, 136, 108, 110, 113},
    300: {196, 177, 117, 119, 122},
    301: {198, 139, 204, 141, 144},
}

indexer = {
    (0,): 0,
    (1,): 1,
    (2,): 2,
    (3,): 3,
    (4,): 4,
    (5,): 5,
    (6,): 6,
    (7,): 7,
    (8,): 8,
    (9,): 9,
    (10,): 10,
    (11,): 11,
    (12,): 12,
    (13,): 13,
    (14,): 14,
    (15,): 15,
    (16,): 16,
    (17,): 17,
    (18,): 18,
    (19,): 19,
    (20,): 20,
    (21,): 21,
    (22,): 22,
    (23,): 23,
    (24,): 24,
    (25,): 25,
    (26,): 26,
    (27,): 27,
    (28,): 28,
    (29,): 29,
    (30,): 30,
    (31,): 31,
    (32,): 32,
    (33,): 33,
    (34,): 34,
    (35,): 35,
    (36,): 36,
    (37,): 37,
    (38,): 38,
    (39,): 39,
    (40,): 40,
    (41,): 41,
    (42,): 42,
    (43,): 43,
    (44,): 44,
    (45,): 45,
    (46,): 46,
    (47,): 47,
    (48,): 48,
    (49,): 49,
    (50,): 50,
    (51,): 51,
    (52,): 52,
    (53,): 53,
    (54,): 54,
    (55,): 55,
    (56,): 56,
    (57,): 57,
    (58,): 58,
    (59,): 59,
    (6, 36): 60,
    (36, 6): 60,
    (4, 6): 61,
    (6, 4): 61,
    (6, 35): 62,
    (35, 6): 62,
    (5, 6): 63,
    (6, 5): 63,
    (6, 7): 64,
    (7, 6): 64,
    (4, 36): 65,
    (36, 4): 65,
    (36, 37): 66,
    (37, 36): 66,
    (3, 36): 67,
    (36, 3): 67,
    (35, 36): 68,
    (36, 35): 68,
    (4, 5): 69,
    (5, 4): 69,
    (0, 4): 70,
    (4, 0): 70,
    (3, 4): 71,
    (4, 3): 71,
    (7, 35): 72,
    (35, 7): 72,
    (34, 35): 73,
    (35, 34): 73,
    (35, 39): 74,
    (39, 35): 74,
    (5, 14): 75,
    (14, 5): 75,
    (0, 5): 76,
    (5, 0): 76,
    (5, 9): 77,
    (9, 5): 77,
    (7, 34): 78,
    (34, 7): 78,
    (7, 33): 79,
    (33, 7): 79,
    (7, 8): 80,
    (8, 7): 80,
    (1, 17): 81,
    (17, 1): 81,
    (1, 13): 82,
    (13, 1): 82,
    (1, 18): 83,
    (18, 1): 83,
    (0, 1): 84,
    (1, 0): 84,
    (1, 2): 85,
    (2, 1): 85,
    (13, 17): 86,
    (17, 13): 86,
    (16, 17): 87,
    (17, 16): 87,
    (12, 17): 88,
    (17, 12): 88,
    (17, 18): 89,
    (18, 17): 89,
    (0, 13): 90,
    (13, 0): 90,
    (13, 14): 91,
    (14, 13): 91,
    (12, 13): 92,
    (13, 12): 92,
    (2, 18): 93,
    (18, 2): 93,
    (18, 21): 94,
    (21, 18): 94,
    (18, 19): 95,
    (19, 18): 95,
    (0, 14): 96,
    (14, 0): 96,
    (2, 21): 97,
    (21, 2): 97,
    (2, 22): 98,
    (22, 2): 98,
    (2, 3): 99,
    (3, 2): 99,
    (10, 14): 100,
    (14, 10): 100,
    (9, 14): 101,
    (14, 9): 101,
    (9, 10): 102,
    (10, 9): 102,
    (9, 48): 103,
    (48, 9): 103,
    (8, 9): 104,
    (9, 8): 104,
    (10, 48): 105,
    (48, 10): 105,
    (10, 49): 106,
    (49, 10): 106,
    (10, 11): 107,
    (11, 10): 107,
    (47, 48): 108,
    (48, 47): 108,
    (8, 48): 109,
    (48, 8): 109,
    (48, 49): 110,
    (49, 48): 110,
    (11, 49): 111,
    (49, 11): 111,
    (49, 50): 112,
    (50, 49): 112,
    (45, 49): 113,
    (49, 45): 113,
    (11, 50): 114,
    (50, 11): 114,
    (11, 51): 115,
    (51, 11): 115,
    (11, 12): 116,
    (12, 11): 116,
    (50, 54): 117,
    (54, 50): 117,
    (45, 50): 118,
    (50, 45): 118,
    (50, 51): 119,
    (51, 50): 119,
    (16, 51): 120,
    (51, 16): 120,
    (12, 51): 121,
    (51, 12): 121,
    (51, 52): 122,
    (52, 51): 122,
    (12, 16): 123,
    (16, 12): 123,
    (8, 47): 124,
    (47, 8): 124,
    (8, 33): 125,
    (33, 8): 125,
    (33, 47): 126,
    (47, 33): 126,
    (32, 47): 127,
    (47, 32): 127,
    (46, 47): 128,
    (47, 46): 128,
    (33, 34): 129,
    (34, 33): 129,
    (32, 33): 130,
    (33, 32): 130,
    (32, 46): 131,
    (46, 32): 131,
    (32, 58): 132,
    (58, 32): 132,
    (31, 32): 133,
    (32, 31): 133,
    (46, 58): 134,
    (58, 46): 134,
    (46, 59): 135,
    (59, 46): 135,
    (45, 46): 136,
    (46, 45): 136,
    (34, 39): 137,
    (39, 34): 137,
    (30, 34): 138,
    (34, 30): 138,
    (57, 58): 139,
    (58, 57): 139,
    (31, 58): 140,
    (58, 31): 140,
    (58, 59): 141,
    (59, 58): 141,
    (54, 59): 142,
    (59, 54): 142,
    (45, 59): 143,
    (59, 45): 143,
    (55, 59): 144,
    (59, 55): 144,
    (45, 54): 145,
    (54, 45): 145,
    (3, 37): 146,
    (37, 3): 146,
    (3, 22): 147,
    (22, 3): 147,
    (22, 37): 148,
    (37, 22): 148,
    (23, 37): 149,
    (37, 23): 149,
    (37, 38): 150,
    (38, 37): 150,
    (21, 22): 151,
    (22, 21): 151,
    (22, 23): 152,
    (23, 22): 152,
    (23, 38): 153,
    (38, 23): 153,
    (23, 41): 154,
    (41, 23): 154,
    (23, 24): 155,
    (24, 23): 155,
    (38, 41): 156,
    (41, 38): 156,
    (38, 40): 157,
    (40, 38): 157,
    (38, 39): 158,
    (39, 38): 158,
    (30, 39): 159,
    (39, 30): 159,
    (39, 40): 160,
    (40, 39): 160,
    (30, 40): 161,
    (40, 30): 161,
    (30, 44): 162,
    (44, 30): 162,
    (30, 31): 163,
    (31, 30): 163,
    (19, 21): 164,
    (21, 19): 164,
    (20, 21): 165,
    (21, 20): 165,
    (41, 42): 166,
    (42, 41): 166,
    (24, 41): 167,
    (41, 24): 167,
    (40, 41): 168,
    (41, 40): 168,
    (40, 44): 169,
    (44, 40): 169,
    (44, 57): 170,
    (57, 44): 170,
    (31, 44): 171,
    (44, 31): 171,
    (43, 44): 172,
    (44, 43): 172,
    (31, 57): 173,
    (57, 31): 173,
    (16, 52): 174,
    (52, 16): 174,
    (15, 16): 175,
    (16, 15): 175,
    (15, 52): 176,
    (52, 15): 176,
    (52, 53): 177,
    (53, 52): 177,
    (28, 52): 178,
    (52, 28): 178,
    (15, 28): 179,
    (28, 15): 179,
    (15, 29): 180,
    (29, 15): 180,
    (15, 19): 181,
    (19, 15): 181,
    (19, 20): 182,
    (20, 19): 182,
    (19, 29): 183,
    (29, 19): 183,
    (20, 29): 184,
    (29, 20): 184,
    (20, 25): 185,
    (25, 20): 185,
    (20, 24): 186,
    (24, 20): 186,
    (28, 53): 187,
    (53, 28): 187,
    (27, 28): 188,
    (28, 27): 188,
    (28, 29): 189,
    (29, 28): 189,
    (25, 29): 190,
    (29, 25): 190,
    (25, 42): 191,
    (42, 25): 191,
    (24, 25): 192,
    (25, 24): 192,
    (25, 26): 193,
    (26, 25): 193,
    (24, 42): 194,
    (42, 24): 194,
    (54, 55): 195,
    (55, 54): 195,
    (53, 54): 196,
    (54, 53): 196,
    (53, 55): 197,
    (55, 53): 197,
    (55, 56): 198,
    (56, 55): 198,
    (27, 55): 199,
    (55, 27): 199,
    (27, 53): 200,
    (53, 27): 200,
    (27, 56): 201,
    (56, 27): 201,
    (26, 27): 202,
    (27, 26): 202,
    (43, 57): 203,
    (57, 43): 203,
    (56, 57): 204,
    (57, 56): 204,
    (43, 56): 205,
    (56, 43): 205,
    (42, 43): 206,
    (43, 42): 206,
    (26, 43): 207,
    (43, 26): 207,
    (26, 56): 208,
    (56, 26): 208,
    (26, 42): 209,
    (42, 26): 209,
    (4, 6, 36): 210,
    (6, 35, 36): 211,
    (4, 5, 6): 212,
    (6, 7, 35): 213,
    (3, 4, 36): 214,
    (3, 36, 37): 215,
    (0, 4, 5): 216,
    (7, 34, 35): 217,
    (34, 35, 39): 218,
    (0, 5, 14): 219,
    (5, 9, 14): 220,
    (7, 8, 33): 221,
    (7, 33, 34): 222,
    (1, 13, 17): 223,
    (1, 17, 18): 224,
    (0, 1, 13): 225,
    (1, 2, 18): 226,
    (12, 13, 17): 227,
    (12, 16, 17): 228,
    (0, 13, 14): 229,
    (2, 18, 21): 230,
    (18, 19, 21): 231,
    (2, 3, 22): 232,
    (2, 21, 22): 233,
    (9, 10, 14): 234,
    (9, 10, 48): 235,
    (8, 9, 48): 236,
    (10, 48, 49): 237,
    (10, 11, 49): 238,
    (8, 47, 48): 239,
    (11, 49, 50): 240,
    (45, 49, 50): 241,
    (11, 50, 51): 242,
    (11, 12, 51): 243,
    (45, 50, 54): 244,
    (12, 16, 51): 245,
    (16, 51, 52): 246,
    (8, 33, 47): 247,
    (32, 33, 47): 248,
    (32, 46, 47): 249,
    (32, 46, 58): 250,
    (31, 32, 58): 251,
    (46, 58, 59): 252,
    (45, 46, 59): 253,
    (30, 34, 39): 254,
    (31, 57, 58): 255,
    (45, 54, 59): 256,
    (54, 55, 59): 257,
    (3, 22, 37): 258,
    (22, 23, 37): 259,
    (23, 37, 38): 260,
    (23, 38, 41): 261,
    (23, 24, 41): 262,
    (38, 39, 40): 263,
    (38, 40, 41): 264,
    (30, 39, 40): 265,
    (30, 40, 44): 266,
    (30, 31, 44): 267,
    (19, 20, 21): 268,
    (24, 41, 42): 269,
    (31, 44, 57): 270,
    (43, 44, 57): 271,
    (15, 16, 52): 272,
    (15, 28, 52): 273,
    (28, 52, 53): 274,
    (15, 19, 29): 275,
    (15, 28, 29): 276,
    (19, 20, 29): 277,
    (20, 25, 29): 278,
    (20, 24, 25): 279,
    (27, 28, 53): 280,
    (24, 25, 42): 281,
    (25, 26, 42): 282,
    (53, 54, 55): 283,
    (27, 53, 55): 284,
    (27, 55, 56): 285,
    (26, 27, 56): 286,
    (43, 56, 57): 287,
    (26, 43, 56): 288,
    (26, 42, 43): 289,
    (0, 1, 2, 3, 4): 290,
    (5, 6, 7, 8, 9): 291,
    (10, 11, 12, 13, 14): 292,
    (15, 16, 17, 18, 19): 293,
    (20, 21, 22, 23, 24): 294,
    (25, 26, 27, 28, 29): 295,
    (30, 31, 32, 33, 34): 296,
    (35, 36, 37, 38, 39): 297,
    (40, 41, 42, 43, 44): 298,
    (45, 46, 47, 48, 49): 299,
    (50, 51, 52, 53, 54): 300,
    (55, 56, 57, 58, 59): 301,
}

# encoding -> position
decoder = {}
for k, v in indexer.items():
    if len(k) == 1:
        decoder[tuple([k[0]])] = v
    if len(k) == 2:
        decoder[tuple([k[0], k[1]])] = v
        decoder[tuple([k[1], k[0]])] = v
    if len(k) == 3:
        decoder[tuple([k[0], k[1], k[2]])] = v
        decoder[tuple([k[1], k[2], k[0]])] = v
        decoder[tuple([k[2], k[0], k[1]])] = v
    if len(k) == 5:
        decoder[tuple([k[0], k[1], k[2], k[3], k[4]])] = v
        decoder[tuple([k[1], k[2], k[3], k[4], k[0]])] = v
        decoder[tuple([k[2], k[3], k[4], k[0], k[1]])] = v
        decoder[tuple([k[3], k[4], k[0], k[1], k[2]])] = v
        decoder[tuple([k[4], k[0], k[1], k[2], k[3]])] = v

# position -> encoding
encoder = list([tuple() for i in range(302)])
for k, v in indexer.items():
    encoder[v] = tuple(sorted(k))


# Use a kdTree manage all the cities, when a stone is placed, find the nearest city
class CityManager:
    def __init__(self, cities):
        self.cities = cities
        self.kd_tree = cKDTree(self.cities)

    def find_nearest_city(self, position):
        return self.kd_tree.query(position)[1]


cities = np.array(
    [
        [7.40702362e-01, 3.81186158e-01, 4.96145469e-01],
        [9.43151259e-01, 1.48831936e-01, 1.68576273e-01],
        [8.89534298e-01, -2.89202963e-01, 2.55330338e-01],
        [6.53948296e-01, -3.27569196e-01, 6.36516496e-01],
        [5.61965102e-01, 8.67540660e-02, 7.85348432e-01],
        [3.81186158e-01, 4.96145469e-01, 7.40702362e-01],
        [1.48831936e-01, 1.68576273e-01, 9.43151259e-01],
        [-2.89202963e-01, 2.55330338e-01, 8.89534298e-01],
        [-3.27569196e-01, 6.36516496e-01, 6.53948296e-01],
        [8.67540660e-02, 7.85348432e-01, 5.61965102e-01],
        [1.68576273e-01, 9.43151259e-01, 1.48831936e-01],
        [2.55330338e-01, 8.89534298e-01, -2.89202963e-01],
        [6.36516496e-01, 6.53948296e-01, -3.27569196e-01],
        [7.85348432e-01, 5.61965102e-01, 8.67540660e-02],
        [4.96145469e-01, 7.40702362e-01, 3.81186158e-01],
        [5.61965102e-01, -8.67540660e-02, -7.85348432e-01],
        [6.53948296e-01, 3.27569196e-01, -6.36516496e-01],
        [8.89534298e-01, 2.89202963e-01, -2.55330338e-01],
        [9.43151259e-01, -1.48831936e-01, -1.68576273e-01],
        [7.40702362e-01, -3.81186158e-01, -4.96145469e-01],
        [4.96145469e-01, -7.40702362e-01, -3.81186158e-01],
        [7.85348432e-01, -5.61965102e-01, -8.67540660e-02],
        [6.36516496e-01, -6.53948296e-01, 3.27569196e-01],
        [2.55330338e-01, -8.89534298e-01, 2.89202963e-01],
        [1.68576273e-01, -9.43151259e-01, -1.48831936e-01],
        [8.67540660e-02, -7.85348432e-01, -5.61965102e-01],
        [-3.27569196e-01, -6.36516496e-01, -6.53948296e-01],
        [-2.89202963e-01, -2.55330338e-01, -8.89534298e-01],
        [1.48831936e-01, -1.68576273e-01, -9.43151259e-01],
        [3.81186158e-01, -4.96145469e-01, -7.40702362e-01],
        [-7.40702362e-01, -3.81186158e-01, 4.96145469e-01],
        [-9.43151259e-01, -1.48831936e-01, 1.68576273e-01],
        [-8.89534298e-01, 2.89202963e-01, 2.55330338e-01],
        [-6.53948296e-01, 3.27569196e-01, 6.36516496e-01],
        [-5.61965102e-01, -8.67540660e-02, 7.85348432e-01],
        [-1.48831936e-01, -1.68576273e-01, 9.43151259e-01],
        [2.89202963e-01, -2.55330338e-01, 8.89534298e-01],
        [3.27569196e-01, -6.36516496e-01, 6.53948296e-01],
        [-8.67540660e-02, -7.85348432e-01, 5.61965102e-01],
        [-3.81186158e-01, -4.96145469e-01, 7.40702362e-01],
        [-4.96145469e-01, -7.40702362e-01, 3.81186158e-01],
        [-1.68576273e-01, -9.43151259e-01, 1.48831936e-01],
        [-2.55330338e-01, -8.89534298e-01, -2.89202963e-01],
        [-6.36516496e-01, -6.53948296e-01, -3.27569196e-01],
        [-7.85348432e-01, -5.61965102e-01, 8.67540660e-02],
        [-4.96145469e-01, 7.40702362e-01, -3.81186158e-01],
        [-7.85348432e-01, 5.61965102e-01, -8.67540660e-02],
        [-6.36516496e-01, 6.53948296e-01, 3.27569196e-01],
        [-2.55330338e-01, 8.89534298e-01, 2.89202963e-01],
        [-1.68576273e-01, 9.43151259e-01, -1.48831936e-01],
        [-8.67540660e-02, 7.85348432e-01, -5.61965102e-01],
        [3.27569196e-01, 6.36516496e-01, -6.53948296e-01],
        [2.89202963e-01, 2.55330338e-01, -8.89534298e-01],
        [-1.48831936e-01, 1.68576273e-01, -9.43151259e-01],
        [-3.81186158e-01, 4.96145469e-01, -7.40702362e-01],
        [-5.61965102e-01, 8.67540660e-02, -7.85348432e-01],
        [-6.53948296e-01, -3.27569196e-01, -6.36516496e-01],
        [-8.89534298e-01, -2.89202963e-01, -2.55330338e-01],
        [-9.43151259e-01, 1.48831936e-01, -1.68576273e-01],
        [-7.40702362e-01, 3.81186158e-01, -4.96145469e-01],
        [2.19017449e-01, -4.33770330e-02, 9.16342779e-01],
        [3.55398519e-01, 1.27665169e-01, 8.64249845e-01],
        [6.93889390e-17, -4.16333634e-17, 9.43151259e-01],
        [2.65009047e-01, 3.32360871e-01, 8.41926811e-01],
        [-7.01855137e-02, 2.11953306e-01, 9.16342779e-01],
        [4.25584032e-01, -8.42881363e-02, 8.37441365e-01],
        [3.08386080e-01, -4.45923417e-01, 7.71741297e-01],
        [4.71575630e-01, -2.91449767e-01, 7.63025397e-01],
        [7.01855137e-02, -2.11953306e-01, 9.16342779e-01],
        [4.71575630e-01, 2.91449767e-01, 7.63025397e-01],
        [6.51333732e-01, 2.33970112e-01, 6.40746950e-01],
        [6.07956699e-01, -1.20407565e-01, 7.10932464e-01],
        [-2.19017449e-01, 4.33770330e-02, 9.16342779e-01],
        [-3.55398519e-01, -1.27665169e-01, 8.64249845e-01],
        [-2.65009047e-01, -3.32360871e-01, 8.41926811e-01],
        [4.38665813e-01, 6.18423916e-01, 5.60944260e-01],
        [5.60944260e-01, 4.38665813e-01, 6.18423916e-01],
        [2.33970112e-01, 6.40746950e-01, 6.51333732e-01],
        [-4.25584032e-01, 8.42881363e-02, 8.37441365e-01],
        [-4.71575630e-01, 2.91449767e-01, 7.63025397e-01],
        [-3.08386080e-01, 4.45923417e-01, 7.71741297e-01],
        [9.16342779e-01, 2.19017449e-01, -4.33770330e-02],
        [8.64249845e-01, 3.55398519e-01, 1.27665169e-01],
        [9.43151259e-01, 6.93889390e-17, -4.16333634e-17],
        [8.41926811e-01, 2.65009047e-01, 3.32360871e-01],
        [9.16342779e-01, -7.01855137e-02, 2.11953306e-01],
        [8.37441365e-01, 4.25584032e-01, -8.42881363e-02],
        [7.71741297e-01, 3.08386080e-01, -4.45923417e-01],
        [7.63025397e-01, 4.71575630e-01, -2.91449767e-01],
        [9.16342779e-01, 7.01855137e-02, -2.11953306e-01],
        [7.63025397e-01, 4.71575630e-01, 2.91449767e-01],
        [6.40746950e-01, 6.51333732e-01, 2.33970112e-01],
        [7.10932464e-01, 6.07956699e-01, -1.20407565e-01],
        [9.16342779e-01, -2.19017449e-01, 4.33770330e-02],
        [8.64249845e-01, -3.55398519e-01, -1.27665169e-01],
        [8.41926811e-01, -2.65009047e-01, -3.32360871e-01],
        [6.18423916e-01, 5.60944260e-01, 4.38665813e-01],
        [8.37441365e-01, -4.25584032e-01, 8.42881363e-02],
        [7.63025397e-01, -4.71575630e-01, 2.91449767e-01],
        [7.71741297e-01, -3.08386080e-01, 4.45923417e-01],
        [3.32360871e-01, 8.41926811e-01, 2.65009047e-01],
        [2.91449767e-01, 7.63025397e-01, 4.71575630e-01],
        [1.27665169e-01, 8.64249845e-01, 3.55398519e-01],
        [-8.42881363e-02, 8.37441365e-01, 4.25584032e-01],
        [-1.20407565e-01, 7.10932464e-01, 6.07956699e-01],
        [-4.33770330e-02, 9.16342779e-01, 2.19017449e-01],
        [-5.55111512e-17, 9.43151259e-01, 4.16333634e-17],
        [2.11953306e-01, 9.16342779e-01, -7.01855137e-02],
        [-4.45923417e-01, 7.71741297e-01, 3.08386080e-01],
        [-2.91449767e-01, 7.63025397e-01, 4.71575630e-01],
        [-2.11953306e-01, 9.16342779e-01, 7.01855137e-02],
        [4.33770330e-02, 9.16342779e-01, -2.19017449e-01],
        [-1.27665169e-01, 8.64249845e-01, -3.55398519e-01],
        [-3.32360871e-01, 8.41926811e-01, -2.65009047e-01],
        [8.42881363e-02, 8.37441365e-01, -4.25584032e-01],
        [2.91449767e-01, 7.63025397e-01, -4.71575630e-01],
        [4.45923417e-01, 7.71741297e-01, -3.08386080e-01],
        [-2.33970112e-01, 6.40746950e-01, -6.51333732e-01],
        [-2.91449767e-01, 7.63025397e-01, -4.71575630e-01],
        [1.20407565e-01, 7.10932464e-01, -6.07956699e-01],
        [4.90758746e-01, 4.82042846e-01, -6.45232396e-01],
        [4.82042846e-01, 6.45232396e-01, -4.90758746e-01],
        [3.08386080e-01, 4.45923417e-01, -7.71741297e-01],
        [6.45232396e-01, 4.90758746e-01, -4.82042846e-01],
        [-4.82042846e-01, 6.45232396e-01, 4.90758746e-01],
        [-4.90758746e-01, 4.82042846e-01, 6.45232396e-01],
        [-6.45232396e-01, 4.90758746e-01, 4.82042846e-01],
        [-7.63025397e-01, 4.71575630e-01, 2.91449767e-01],
        [-7.10932464e-01, 6.07956699e-01, 1.20407565e-01],
        [-6.07956699e-01, 1.20407565e-01, 7.10932464e-01],
        [-7.71741297e-01, 3.08386080e-01, 4.45923417e-01],
        [-8.37441365e-01, 4.25584032e-01, 8.42881363e-02],
        [-9.16342779e-01, 2.19017449e-01, 4.33770330e-02],
        [-9.16342779e-01, 7.01855137e-02, 2.11953306e-01],
        [-8.64249845e-01, 3.55398519e-01, -1.27665169e-01],
        [-7.63025397e-01, 4.71575630e-01, -2.91449767e-01],
        [-6.40746950e-01, 6.51333732e-01, -2.33970112e-01],
        [-4.71575630e-01, -2.91449767e-01, 7.63025397e-01],
        [-6.51333732e-01, -2.33970112e-01, 6.40746950e-01],
        [-9.16342779e-01, -7.01855137e-02, -2.11953306e-01],
        [-9.43151259e-01, -1.24900090e-16, -2.77555756e-17],
        [-8.41926811e-01, 2.65009047e-01, -3.32360871e-01],
        [-5.60944260e-01, 4.38665813e-01, -6.18423916e-01],
        [-6.18423916e-01, 5.60944260e-01, -4.38665813e-01],
        [-6.51333732e-01, 2.33970112e-01, -6.40746950e-01],
        [-4.38665813e-01, 6.18423916e-01, -5.60944260e-01],
        [4.90758746e-01, -4.82042846e-01, 6.45232396e-01],
        [6.45232396e-01, -4.90758746e-01, 4.82042846e-01],
        [4.82042846e-01, -6.45232396e-01, 4.90758746e-01],
        [2.91449767e-01, -7.63025397e-01, 4.71575630e-01],
        [1.20407565e-01, -7.10932464e-01, 6.07956699e-01],
        [7.10932464e-01, -6.07956699e-01, 1.20407565e-01],
        [4.45923417e-01, -7.71741297e-01, 3.08386080e-01],
        [8.42881363e-02, -8.37441365e-01, 4.25584032e-01],
        [4.33770330e-02, -9.16342779e-01, 2.19017449e-01],
        [2.11953306e-01, -9.16342779e-01, 7.01855137e-02],
        [-1.27665169e-01, -8.64249845e-01, 3.55398519e-01],
        [-2.91449767e-01, -7.63025397e-01, 4.71575630e-01],
        [-2.33970112e-01, -6.40746950e-01, 6.51333732e-01],
        [-5.60944260e-01, -4.38665813e-01, 6.18423916e-01],
        [-4.38665813e-01, -6.18423916e-01, 5.60944260e-01],
        [-6.18423916e-01, -5.60944260e-01, 4.38665813e-01],
        [-7.63025397e-01, -4.71575630e-01, 2.91449767e-01],
        [-8.41926811e-01, -2.65009047e-01, 3.32360871e-01],
        [7.63025397e-01, -4.71575630e-01, -2.91449767e-01],
        [6.40746950e-01, -6.51333732e-01, -2.33970112e-01],
        [-2.11953306e-01, -9.16342779e-01, -7.01855137e-02],
        [-1.38777878e-17, -9.43151259e-01, -1.11022302e-16],
        [-3.32360871e-01, -8.41926811e-01, 2.65009047e-01],
        [-6.40746950e-01, -6.51333732e-01, 2.33970112e-01],
        [-8.37441365e-01, -4.25584032e-01, -8.42881363e-02],
        [-8.64249845e-01, -3.55398519e-01, 1.27665169e-01],
        [-7.10932464e-01, -6.07956699e-01, -1.20407565e-01],
        [-9.16342779e-01, -2.19017449e-01, -4.33770330e-02],
        [4.71575630e-01, 2.91449767e-01, -7.63025397e-01],
        [6.07956699e-01, 1.20407565e-01, -7.10932464e-01],
        [4.25584032e-01, 8.42881363e-02, -8.37441365e-01],
        [7.01855137e-02, 2.11953306e-01, -9.16342779e-01],
        [2.19017449e-01, 4.33770330e-02, -9.16342779e-01],
        [3.55398519e-01, -1.27665169e-01, -8.64249845e-01],
        [4.71575630e-01, -2.91449767e-01, -7.63025397e-01],
        [6.51333732e-01, -2.33970112e-01, -6.40746950e-01],
        [6.18423916e-01, -5.60944260e-01, -4.38665813e-01],
        [5.60944260e-01, -4.38665813e-01, -6.18423916e-01],
        [4.38665813e-01, -6.18423916e-01, -5.60944260e-01],
        [2.91449767e-01, -7.63025397e-01, -4.71575630e-01],
        [3.32360871e-01, -8.41926811e-01, -2.65009047e-01],
        [-5.55111512e-17, 9.71445147e-17, -9.43151259e-01],
        [-7.01855137e-02, -2.11953306e-01, -9.16342779e-01],
        [2.65009047e-01, -3.32360871e-01, -8.41926811e-01],
        [2.33970112e-01, -6.40746950e-01, -6.51333732e-01],
        [-8.42881363e-02, -8.37441365e-01, -4.25584032e-01],
        [1.27665169e-01, -8.64249845e-01, -3.55398519e-01],
        [-1.20407565e-01, -7.10932464e-01, -6.07956699e-01],
        [-4.33770330e-02, -9.16342779e-01, -2.19017449e-01],
        [-4.71575630e-01, 2.91449767e-01, -7.63025397e-01],
        [-2.65009047e-01, 3.32360871e-01, -8.41926811e-01],
        [-3.55398519e-01, 1.27665169e-01, -8.64249845e-01],
        [-6.07956699e-01, -1.20407565e-01, -7.10932464e-01],
        [-4.25584032e-01, -8.42881363e-02, -8.37441365e-01],
        [-2.19017449e-01, -4.33770330e-02, -9.16342779e-01],
        [-4.71575630e-01, -2.91449767e-01, -7.63025397e-01],
        [-3.08386080e-01, -4.45923417e-01, -7.71741297e-01],
        [-7.63025397e-01, -4.71575630e-01, -2.91449767e-01],
        [-7.71741297e-01, -3.08386080e-01, -4.45923417e-01],
        [-6.45232396e-01, -4.90758746e-01, -4.82042846e-01],
        [-4.45923417e-01, -7.71741297e-01, -3.08386080e-01],
        [-4.82042846e-01, -6.45232396e-01, -4.90758746e-01],
        [-4.90758746e-01, -4.82042846e-01, -6.45232396e-01],
        [-2.91449767e-01, -7.63025397e-01, -4.71575630e-01],
        [3.33333333e-01, 1.85037171e-17, 8.72677996e-01],
        [9.64009876e-02, -8.51101128e-02, 9.25278939e-01],
        [3.63994398e-01, 2.50491936e-01, 8.23067351e-01],
        [-9.64009876e-02, 8.51101128e-02, 9.25278939e-01],
        [5.01705454e-01, -1.65381823e-01, 7.70466409e-01],
        [4.23573485e-01, -4.06472010e-01, 7.26666363e-01],
        [5.61284541e-01, 3.21361897e-01, 6.74065421e-01],
        [-3.33333333e-01, -7.40148683e-17, 8.72677996e-01],
        [-3.63994398e-01, -2.50491936e-01, 8.23067351e-01],
        [5.39344663e-01, 5.39344663e-01, 5.39344663e-01],
        [3.21361897e-01, 6.74065421e-01, 5.61284541e-01],
        [-4.23573485e-01, 4.06472010e-01, 7.26666363e-01],
        [-5.01705454e-01, 1.65381823e-01, 7.70466409e-01],
        [8.72677996e-01, 3.33333333e-01, 1.85037171e-17],
        [9.25278939e-01, 9.64009876e-02, -8.51101128e-02],
        [8.23067351e-01, 3.63994398e-01, 2.50491936e-01],
        [9.25278939e-01, -9.64009876e-02, 8.51101128e-02],
        [7.70466409e-01, 5.01705454e-01, -1.65381823e-01],
        [7.26666363e-01, 4.23573485e-01, -4.06472010e-01],
        [6.74065421e-01, 5.61284541e-01, 3.21361897e-01],
        [8.72677996e-01, -3.33333333e-01, -7.40148683e-17],
        [8.23067351e-01, -3.63994398e-01, -2.50491936e-01],
        [7.26666363e-01, -4.23573485e-01, 4.06472010e-01],
        [7.70466409e-01, -5.01705454e-01, 1.65381823e-01],
        [2.50491936e-01, 8.23067351e-01, 3.63994398e-01],
        [-3.70074342e-17, 8.72677996e-01, 3.33333333e-01],
        [-1.65381823e-01, 7.70466409e-01, 5.01705454e-01],
        [-8.51101128e-02, 9.25278939e-01, 9.64009876e-02],
        [8.51101128e-02, 9.25278939e-01, -9.64009876e-02],
        [-4.06472010e-01, 7.26666363e-01, 4.23573485e-01],
        [-8.32667268e-17, 8.72677996e-01, -3.33333333e-01],
        [-2.50491936e-01, 8.23067351e-01, -3.63994398e-01],
        [1.65381823e-01, 7.70466409e-01, -5.01705454e-01],
        [4.06472010e-01, 7.26666363e-01, -4.23573485e-01],
        [-3.21361897e-01, 6.74065421e-01, -5.61284541e-01],
        [5.39344663e-01, 5.39344663e-01, -5.39344663e-01],
        [4.23573485e-01, 4.06472010e-01, -7.26666363e-01],
        [-5.39344663e-01, 5.39344663e-01, 5.39344663e-01],
        [-7.26666363e-01, 4.23573485e-01, 4.06472010e-01],
        [-7.70466409e-01, 5.01705454e-01, 1.65381823e-01],
        [-8.72677996e-01, 3.33333333e-01, 8.32667268e-17],
        [-9.25278939e-01, 9.64009876e-02, 8.51101128e-02],
        [-8.23067351e-01, 3.63994398e-01, -2.50491936e-01],
        [-6.74065421e-01, 5.61284541e-01, -3.21361897e-01],
        [-5.61284541e-01, -3.21361897e-01, 6.74065421e-01],
        [-9.25278939e-01, -9.64009876e-02, -8.51101128e-02],
        [-5.39344663e-01, 5.39344663e-01, -5.39344663e-01],
        [-5.61284541e-01, 3.21361897e-01, -6.74065421e-01],
        [5.39344663e-01, -5.39344663e-01, 5.39344663e-01],
        [4.06472010e-01, -7.26666363e-01, 4.23573485e-01],
        [1.65381823e-01, -7.70466409e-01, 5.01705454e-01],
        [9.25185854e-17, -8.72677996e-01, 3.33333333e-01],
        [8.51101128e-02, -9.25278939e-01, 9.64009876e-02],
        [-3.21361897e-01, -6.74065421e-01, 5.61284541e-01],
        [-2.50491936e-01, -8.23067351e-01, 3.63994398e-01],
        [-5.39344663e-01, -5.39344663e-01, 5.39344663e-01],
        [-6.74065421e-01, -5.61284541e-01, 3.21361897e-01],
        [-8.23067351e-01, -3.63994398e-01, 2.50491936e-01],
        [6.74065421e-01, -5.61284541e-01, -3.21361897e-01],
        [-8.51101128e-02, -9.25278939e-01, -9.64009876e-02],
        [-8.72677996e-01, -3.33333333e-01, -3.70074342e-17],
        [-7.70466409e-01, -5.01705454e-01, -1.65381823e-01],
        [5.01705454e-01, 1.65381823e-01, -7.70466409e-01],
        [3.33333333e-01, 9.25185854e-17, -8.72677996e-01],
        [9.64009876e-02, 8.51101128e-02, -9.25278939e-01],
        [5.61284541e-01, -3.21361897e-01, -6.74065421e-01],
        [3.63994398e-01, -2.50491936e-01, -8.23067351e-01],
        [5.39344663e-01, -5.39344663e-01, -5.39344663e-01],
        [3.21361897e-01, -6.74065421e-01, -5.61284541e-01],
        [2.50491936e-01, -8.23067351e-01, -3.63994398e-01],
        [-9.64009876e-02, -8.51101128e-02, -9.25278939e-01],
        [-5.55111512e-17, -8.72677996e-01, -3.33333333e-01],
        [-1.65381823e-01, -7.70466409e-01, -5.01705454e-01],
        [-3.63994398e-01, 2.50491936e-01, -8.23067351e-01],
        [-3.33333333e-01, 7.40148683e-17, -8.72677996e-01],
        [-5.01705454e-01, -1.65381823e-01, -7.70466409e-01],
        [-4.23573485e-01, -4.06472010e-01, -7.26666363e-01],
        [-7.26666363e-01, -4.23573485e-01, -4.06472010e-01],
        [-5.39344663e-01, -5.39344663e-01, -5.39344663e-01],
        [-4.06472010e-01, -7.26666363e-01, -4.23573485e-01],
        [7.57860263e-01, 4.44089210e-17, 4.68383402e-01],
        [4.44089210e-17, 4.68383402e-01, 7.57860263e-01],
        [4.68383402e-01, 7.57860263e-01, 0.00000000e00],
        [7.57860263e-01, 3.33066907e-17, -4.68383402e-01],
        [4.68383402e-01, -7.57860263e-01, -8.88178420e-17],
        [-3.33066907e-17, -4.68383402e-01, -7.57860263e-01],
        [-7.57860263e-01, -8.32667268e-17, 4.68383402e-01],
        [2.22044605e-17, -4.68383402e-01, 7.57860263e-01],
        [-4.68383402e-01, -7.57860263e-01, -2.22044605e-17],
        [-4.68383402e-01, 7.57860263e-01, 0.00000000e00],
        [-7.77156117e-17, 4.68383402e-01, -7.57860263e-01],
        [-7.57860263e-01, -4.44089210e-17, -4.68383402e-01],
    ],
    dtype=np.double,
)

city_manager = CityManager(cities)

axis = np.zeros((8, 3), dtype=np.float64)
axis[0] = np.mean(cities[0:15], axis=0)
axis[1] = np.mean(cities[15:30], axis=0)
axis[2] = np.mean(cities[30:45], axis=0)
axis[3] = np.mean(cities[45:60], axis=0)
axis[4] = -axis[0]
axis[5] = -axis[1]
axis[6] = -axis[2]
axis[7] = -axis[3]
axis = axis / np.linalg.norm(axis, axis=1)[:, np.newaxis]


def get_areas():
    phi = (1 + np.sqrt(5)) / 2
    coefficients = np.array([1, 2, 0, -(phi**2)], dtype=np.float64)
    roots = np.roots(coefficients)
    xi = roots[np.isreal(roots)].real[0]
    length = 2 * xi * np.sqrt(1 - xi)
    triangle_area = np.sqrt(3) / 4 * length**2
    pentagon_area = np.sqrt(25 + 10 * np.sqrt(5)) * length**2 / 4
    total_area = 80 * triangle_area + 12 * pentagon_area
    return triangle_area / 3, pentagon_area / 5, total_area


polysmall_area, polylarge_area, total_area = get_areas()
